### Starting build.
# Target: repl.ml.depends, tags: { package(lambda-term), package(lwt), package(oUnit), package(react), package(str), extension:ml, file:repl.ml, ocaml, ocamldep, quiet, thread, traverse, use_menhir }
ocamlfind ocamldep -package react -package lwt -package lambda-term -package oUnit -package str -modules repl.ml > repl.ml.depends # cached
# Target: main.mli.depends, tags: { package(oUnit), package(str), extension:mli, file:main.mli, ocaml, ocamldep, quiet, thread, traverse, use_menhir }
ocamlfind ocamldep -package oUnit -package str -modules main.mli > main.mli.depends # cached
# Target: main.cmi, tags: { package(oUnit), package(str), byte, compile, extension:mli, file:main.mli, interf, ocaml, quiet, thread, traverse, use_menhir }
ocamlfind ocamlc -c -thread -package oUnit -package str -o main.cmi main.mli # cached
# Target: repl.cmo, tags: { package(lambda-term), package(lwt), package(oUnit), package(react), package(str), byte, compile, extension:cmo, extension:ml, file:repl.cmo, file:repl.ml, implem, ocaml, quiet, thread, traverse, use_menhir }
ocamlfind ocamlc -c -thread -package react -package lwt -package lambda-term -package oUnit -package str -o repl.cmo repl.ml # cached
# Target: main.ml.depends, tags: { package(oUnit), package(str), extension:ml, file:main.ml, ocaml, ocamldep, quiet, thread, traverse, use_menhir }
ocamlfind ocamldep -package oUnit -package str -modules main.ml > main.ml.depends # cached
# Target: ast.ml.depends, tags: { package(oUnit), package(str), extension:ml, file:ast.ml, ocaml, ocamldep, quiet, thread, traverse, use_menhir }
ocamlfind ocamldep -package oUnit -package str -modules ast.ml > ast.ml.depends # cached
# Target: automata.ml.depends, tags: { package(oUnit), package(str), extension:ml, file:automata.ml, ocaml, ocamldep, quiet, thread, traverse, use_menhir }
ocamlfind ocamldep -package oUnit -package str -modules automata.ml > automata.ml.depends # cached
# Target: ast.cmo, tags: { package(oUnit), package(str), byte, compile, extension:cmo, extension:ml, file:ast.cmo, file:ast.ml, implem, ocaml, quiet, thread, traverse, use_menhir }
ocamlfind ocamlc -c -thread -package oUnit -package str -o ast.cmo ast.ml
# Target: eval.mli.depends, tags: { package(oUnit), package(str), extension:mli, file:eval.mli, ocaml, ocamldep, quiet, thread, traverse, use_menhir }
ocamlfind ocamldep -package oUnit -package str -modules eval.mli > eval.mli.depends # cached
# Target: automata.cmo, tags: { package(oUnit), package(str), byte, compile, extension:cmo, extension:ml, file:automata.cmo, file:automata.ml, implem, ocaml, quiet, thread, traverse, use_menhir }
ocamlfind ocamlc -c -thread -package oUnit -package str -o automata.cmo automata.ml
# Target: parse.mli.depends, tags: { package(oUnit), package(str), extension:mli, file:parse.mli, ocaml, ocamldep, quiet, thread, traverse, use_menhir }
ocamlfind ocamldep -package oUnit -package str -modules parse.mli > parse.mli.depends # cached
# Target: eval.cmi, tags: { package(oUnit), package(str), byte, compile, extension:mli, file:eval.mli, interf, ocaml, quiet, thread, traverse, use_menhir }
ocamlfind ocamlc -c -thread -package oUnit -package str -o eval.cmi eval.mli
# Target: parse.cmi, tags: { package(oUnit), package(str), byte, compile, extension:mli, file:parse.mli, interf, ocaml, quiet, thread, traverse, use_menhir }
ocamlfind ocamlc -c -thread -package oUnit -package str -o parse.cmi parse.mli
# Target: main.cmo, tags: { package(oUnit), package(str), byte, compile, extension:cmo, extension:ml, file:main.cmo, file:main.ml, implem, ocaml, quiet, thread, traverse, use_menhir }
ocamlfind ocamlc -c -thread -package oUnit -package str -o main.cmo main.ml # cached
# Target: eval.ml.depends, tags: { package(oUnit), package(str), coverage, extension:ml, file:eval.ml, ocaml, ocamldep, quiet, thread, traverse, use_menhir }
ocamlfind ocamldep -package oUnit -package str -modules eval.ml > eval.ml.depends # cached
# Target: parse.ml.depends, tags: { package(oUnit), package(str), extension:ml, file:parse.ml, ocaml, ocamldep, quiet, thread, traverse, use_menhir }
ocamlfind ocamldep -package oUnit -package str -modules parse.ml > parse.ml.depends # cached
# Target: lexer.mll, tags: { package(oUnit), package(str), extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, quiet, thread, traverse, use_menhir }
ocamllex.opt -q lexer.mll # cached
# Target: lexer.ml.depends, tags: { package(oUnit), package(str), extension:ml, file:lexer.ml, ocaml, ocamldep, quiet, thread, traverse, use_menhir }
ocamlfind ocamldep -package oUnit -package str -modules lexer.ml > lexer.ml.depends # cached
# Target: parser.mly.depends, tags: { package(oUnit), package(str), extension:mly, file:parser.mly, infer, menhir_ocamldep, ocaml, ocamldep, quiet, thread, traverse, use_menhir }
menhir --raw-depend --ocamldep 'ocamlfind ocamldep -modules' parser.mly > parser.mly.depends # cached
# Target: ast_factory.mli.depends, tags: { package(oUnit), package(str), extension:mli, file:ast_factory.mli, ocaml, ocamldep, quiet, thread, traverse, use_menhir }
ocamlfind ocamldep -package oUnit -package str -modules ast_factory.mli > ast_factory.mli.depends # cached
# Target: ast_factory.cmi, tags: { package(oUnit), package(str), byte, compile, extension:mli, file:ast_factory.mli, interf, ocaml, quiet, thread, traverse, use_menhir }
ocamlfind ocamlc -c -thread -package oUnit -package str -o ast_factory.cmi ast_factory.mli
# Target: parser.mly, tags: { package(oUnit), package(str), byte, compile, extension:ml, extension:mly, file:parser.ml, file:parser.mly, infer, menhir, ocaml, parser, quiet, thread, traverse, use_menhir }
menhir --ocamlc 'ocamlfind ocamlc -thread -package oUnit -package str' --infer parser.mly
+ menhir --ocamlc 'ocamlfind ocamlc -thread -package oUnit -package str' --infer parser.mly
Warning: 8 states have shift/reduce conflicts.
Warning: one state has reduce/reduce conflicts.
Warning: 16 shift/reduce conflicts were arbitrarily resolved.
Warning: 4 reduce/reduce conflicts were arbitrarily resolved.
File "parser.mly", line 45, characters 4-32:
Warning: production expr -> expr AND bool_expr is never reduced.
Warning: in total, 1 production is never reduced.
# Target: parser.mli.depends, tags: { package(oUnit), package(str), extension:mli, file:parser.mli, ocaml, ocamldep, quiet, thread, traverse, use_menhir }
ocamlfind ocamldep -package oUnit -package str -modules parser.mli > parser.mli.depends # cached
# Target: parser.cmi, tags: { package(oUnit), package(str), byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet, thread, traverse, use_menhir }
ocamlfind ocamlc -c -thread -package oUnit -package str -o parser.cmi parser.mli
# Target: lexer.cmo, tags: { package(oUnit), package(str), byte, compile, extension:cmo, extension:ml, file:lexer.cmo, file:lexer.ml, implem, ocaml, quiet, thread, traverse, use_menhir }
ocamlfind ocamlc -c -thread -package oUnit -package str -o lexer.cmo lexer.ml
# Target: eval.cmo, tags: { package(oUnit), package(str), byte, compile, coverage, extension:cmo, extension:ml, file:eval.cmo, file:eval.ml, implem, ocaml, quiet, thread, traverse, use_menhir }
ocamlfind ocamlc -c -thread -package oUnit -package str -o eval.cmo eval.ml
# Target: parse.cmo, tags: { package(oUnit), package(str), byte, compile, extension:cmo, extension:ml, file:parse.cmo, file:parse.ml, implem, ocaml, quiet, thread, traverse, use_menhir }
ocamlfind ocamlc -c -thread -package oUnit -package str -o parse.cmo parse.ml
# Target: parser.ml.depends, tags: { package(oUnit), package(str), extension:ml, file:parser.ml, ocaml, ocamldep, quiet, thread, traverse, use_menhir }
ocamlfind ocamldep -package oUnit -package str -modules parser.ml > parser.ml.depends # cached
# Target: parser.cmo, tags: { package(oUnit), package(str), byte, compile, extension:cmo, extension:ml, file:parser.cmo, file:parser.ml, implem, ocaml, quiet, thread, traverse, use_menhir }
ocamlfind ocamlc -c -thread -package oUnit -package str -o parser.cmo parser.ml
# Target: ast_factory.ml.depends, tags: { package(oUnit), package(str), extension:ml, file:ast_factory.ml, ocaml, ocamldep, quiet, thread, traverse, use_menhir }
ocamlfind ocamldep -package oUnit -package str -modules ast_factory.ml > ast_factory.ml.depends # cached
# Target: ast_factory.cmo, tags: { package(oUnit), package(str), byte, compile, extension:cmo, extension:ml, file:ast_factory.cmo, file:ast_factory.ml, implem, ocaml, quiet, thread, traverse, use_menhir }
ocamlfind ocamlc -c -thread -package oUnit -package str -o ast_factory.cmo ast_factory.ml
# Target: repl.byte, tags: { package(lambda-term), package(lwt), package(oUnit), package(react), package(str), byte, dont_link_with, extension:byte, file:repl.byte, link, ocaml, program, quiet, thread, traverse, use_menhir }
ocamlfind ocamlc -linkpkg -thread -package react -package lwt -package lambda-term -package oUnit -package str ast.cmo automata.cmo eval.cmo ast_factory.cmo parser.cmo lexer.cmo parse.cmo main.cmo repl.cmo -o repl.byte
# Compilation successful.
